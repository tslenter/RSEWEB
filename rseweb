#!/bin/bash

#License:
#"Remote Syslog" is a free application what can be used to view syslog messages.
#Copyright (C) 2021 Tom Slenter
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#For more information contact the author:
#Name author: Tom Slenter
#E-mail: info@remotesyslog.com

#Variables
RSPATH=$(pwd)
RSDEST=/opt/RSEWEB
RSECORE=/opt/RSECORE
SYSLOGCONF=/etc/syslog-ng/conf.d
APACHCONF=/var/www/html
APACONFIG=/etc/apache2/sites-available
RSBIN=/usr/bin
APACHPHP=/etc/php/7.[0-9]/apache2

#Banner
function banner() {
    echo ""
    echo "##################################################"
    echo "#Remote Syslog Elasticsearch                     #"
    echo "#More information: https://www.remotesyslog.com  #"
    echo "#Remote Syslog installation webservice           #"
    echo "#Version: RSE 0.1                                #"
    echo "#Donations: https://github.com/tslenter/RSEWEB   #"
    echo "##################################################"
    echo ""
}

#Check if user is root
if ! [ $(id -u) = 0 ]; then
    clear
    banner
    echo "This installation must be run as root!"
    echo ""
    exit 1
fi

#Functions to check files, packages ...
function check_package() {
echo "Check package $1"
dpkg-query -l $1 > /dev/null 2>&1
if [ $? = 0 ]
then
    echo "Installation found ..."
else
    echo "Installation failed, abort (Hint: Did you install the core? ..."
    exit
fi
}

#Check if file exist
function check_file() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, continue installation ..."
    else
        echo "File: $1 does not exist, exit ..."
        exit
    fi
}

#Check files in reverse
function check_file_reverse() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, module already installed? Exiting ..."
        exit
    else
        echo "File: $1 does not exist, continue installation ..."
    fi
}

#Check file for GUI based functions
function check_file_gui() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, other GUI installed? Exiting ..."
        exit
    else
        echo "File: $1 does not exist, continue installation ..."
    fi
}

#Enroll functions
function rseinstall() {
#Check installation conflics ...
    echo "Check if RSX is installed ..."
    check_file_gui $SYSLOGCONF/99RSX-rs.conf
    echo "Check if RSC is installed ..."
    check_file_reverse $APACHCONF/rsc/index.php
    echo "Check if RSE is installed ..."
    check_file_reverse $APACHCONF/rse/index.php
#Install packages
    echo "Starting RSE installation ..."
    apt -y install apache2 apache2-utils php libapache2-mod-php libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential php-curl
    check_package "apache2"
    check_package "apache2-utils"
    check_package "php"
    check_package "libapache2-mod-php"
    check_package "libapache2-mod-authnz-external"
    check_package "libapache2-mod-authz-unixgroup"
    check_package "php-cli"
    check_package "libapache2-mod-php"
    check_package "libpam0g-dev"
    check_package "php-pear"
    check_package "php-dev"
    check_package "build-essential"
    check_package "php-curl"
#Checks for php-pam build
    echo "Check packages ..."
    check_package "apache2"
    check_package "build-essential"
#Load PHP authentication module
    echo "Activate PHP PAM ..."
    echo "Compile ..."
    currentpath=$(pwd)
    cd $RSDEST/php-pam
    phpize
    ./configure --prefix=/usr
    make
    make install
    cd $currentpath
    ldconfig
#Setup php login experimental
    echo "Write php config ..."
    cp -rf $RSDEST/config/20-pam.ini $APACHPHP/conf.d/
    check_file $APACHPHP/conf.d/20-pam.ini
#Setup permissions on shadow file (Dangerous)
    echo "!Setup permissions /etc/shadow ...!"
    chmod o+r /etc/shadow
#Remove default webpage
    echo "Remove default GUI website ..."
    if [ -e "$APACHCONF/index.html" ]; then
        echo "File: $APACHCONF/index.html exists, remove file ..."
        rm -rf $APACHCONF/index.html
    else
        echo "File: $APACHCONF/index.html does not exist, continue installation ..."
    fi
#Create RSE directory
    echo "Add RSE website ..."
    echo "Create directory ..."
    mkdir $APACHCONF/rse
#Copy RSE files
    echo "Copy files ..."
    cp -rf $RSDEST/web/* $APACHCONF
    check_file_reverse $APACHCONF/index.html
    check_file $APACHCONF/index.php
    check_file $APACHCONF/logo.png
    check_file $APACHCONF/favicon.ico
    check_file $APACHCONF/style.css
    check_file $APACHCONF/fontawesome/css/all.css
    check_file $APACHCONF/rse/bootstrap.min.css
    check_file $APACHCONF/rse/bootstrap.min.js
    check_file $APACHCONF/rse/chart.js
    check_file $APACHCONF/rse/dash.php
    check_file $APACHCONF/rse/favicon.ico
    check_file $APACHCONF/rse/index.php
    check_file $APACHCONF/rse/jquery-latest.js
    check_file $APACHCONF/rse/logo_black.png
    check_file $APACHCONF/rse/logout.php
    check_file $APACHCONF/rse/rs_init.php
    check_file $APACHCONF/rse/rse.php
    check_file $APACHCONF/rse/rseview.php
#Load apache2 configuration and create SSL with authentication
    echo "Load apache2 configuration with SSL ..."
#Activate SSL
    echo "Activate SSL ..."
#Setup variables:
    varfullservername=$(host -TtA $(hostname -s)|grep "has address"|awk '{print $1}')
    certpath=/etc/cert
    echo "Create .rnd file ..."
    touch $HOME/.rnd
    echo "Certificate auto request for linux webservers!"
    echo "Powered by RSE ..."
    echo "Generate Certificate ..."
    if [ -f $HOME/.rnd ]; then
        echo "File $HOME/.rnd exists ..."
        openssl req -new -x509 -days 3650 -sha256 -newkey rsa:2048 -subj "/C=NL/ST=Limburg/L=Maastricht/O=IT/CN=$varfullservername" -nodes -keyout $HOME/$varfullservername.key -out $HOME/$varfullservername.crt
        echo "Copy SSL certificates ..."
        if [ -d $certpath ]; then
            echo "Directory already exist ..."
        else
            mkdir $certpath
            echo "Directory created ..."
        fi
        cp $HOME/$varfullservername.key $certpath/rs.key
        cp $HOME/$varfullservername.crt $certpath/rs.crt
        echo "Setup permissions ..."
        chmod 600 $certpath/rs.key
        echo "Clean up ..."
        rm -rf $HOME/$varfullservername.key
        rm -rf $HOME/$varfullservername.crt
        echo "Generated key file: $certpath/rs.key"
        echo "Generated cert file: $certpath/rs.crt"
        check_file $certpath/rs.key
        check_file $certpath/rs.crt
    else
       echo "No .rnd found ..."
    fi
#Webserver configuration
    echo "Activate website ..."
    cp -rf $RSDEST/config/rse-apache.conf $APACONFIG/rse-apache.conf
    check_file $APACONFIG/rse-apache.conf
    a2ensite rse-apache
    echo "Disable default config ..."
    a2dissite 000-default
#Activate port 80 and 443
    echo "Added new port.conf to activate 443 and 80 ..."
    cp -rf $RSDEST/config/ports.conf /etc/apache2/ports.conf
    check_file /etc/apache2/ports.conf
#Load apache modules
    echo "Load modules ..."
    a2enmod rewrite
    a2enmod ssl
    service apache2 restart
    echo "Done ..."
}

function rseremove() {
#Check removal steps ...
    echo "Check if RSX is installed ..."
    check_file_gui $SYSLOGCONF/99RSX-rs.conf
    echo "Check if RSC is installed"
    check_file_gui $APACHCONF/rsc/index.php
    echo "Check if RSE is installed"
    check_file $APACHCONF/rse/index.php
#Remove Apache files
    echo "Removing RSE website ..."
    rm -rf $APACHCONF/*
#Remove Apache config and cleanup mess
    rm -rf $APACONFIG/rse-apache.conf
#Remove PHP Authentication
    echo "Remove PHP authentication modules ..."
    chmod o-r /etc/shadow
    rm -rf $APACHPHP/conf.d/20-pam.ini
#Deactivate port 80
    echo "Disable ports 80 and 443 ..."
    rm /etc/apache2/ports.conf
    touch /etc/apache2/ports.conf
    check_file /etc/apache2/ports.conf
#Remove old installation files
    echo "Remove old installation files .."
    rm -rf $RSDEST
    echo "Reload services ..."
    service apache2 restart
    echo "Done ..."
}

#Upgrade function
function guiupgrade() {
    echo "Check if Remote Syslog Core and web is installed ..."
    check_file $RSECORE/rsecore
    check_file $RSDEST/rseweb
    echo "Starting upgrade ..."
    echo "Download installation ..."
    git clone --branch main https://github.com/tslenter/RSEWEB $RSTMP/RSEWEB
    echo "Check if download is successfull ..."
    if [ -d "$RSTMP/RSEWEB" ]; then
         echo "Continue installation ..."
    else
         echo "Clone not successfull ..."
         exit
    fi
    cp -rf $RSTMP/RSEWEB/* $RSDEST
    rm -rf $RSTMP/RSEWEB
#Check packages
    if [ -e "$APACHCONF/rse/index.php" ]; then
        check_file $APACHCONF/rse/index.php
        echo "Starting update RSEWEB ..."
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "libapache2-mod-authnz-external"
        check_package "libapache2-mod-authz-unixgroup"
        check_package "php-cli"
        check_package "libapache2-mod-php"
        check_package "libpam0g-dev"
        check_package "php-pear"
        check_package "php-dev"
        check_package "build-essential"
	check_package "php-curl"
#Update Webpage
        echo "Update webpage code ..."
	cp -rf $RSDEST/web/* $APACHCONF
	check_file_reverse $APACHCONF/index.html
	check_file $APACHCONF/index.php
	check_file $APACHCONF/logo.png
	check_file $APACHCONF/favicon.ico
	check_file $APACHCONF/style.css
	check_file $APACHCONF/fontawesome/css/all.css
	check_file $APACHCONF/rse/bootstrap.min.css
	check_file $APACHCONF/rse/bootstrap.min.js
	check_file $APACHCONF/rse/chart.js
	check_file $APACHCONF/rse/dash.php
	check_file $APACHCONF/rse/favicon.ico
	check_file $APACHCONF/rse/index.php
	check_file $APACHCONF/rse/jquery-latest.js
	check_file $APACHCONF/rse/logo_black.png
	check_file $APACHCONF/rse/logout.php
	check_file $APACHCONF/rse/rs_init.php
	check_file $APACHCONF/rse/rse.php
	check_file $APACHCONF/rse/rseview.php
        echo "Done ..."
        echo "Restarting Apache ..."
        service apache2 restart
        echo "Restarting Syslog-NG ..."
        service syslog-ng restart
        echo "Write php config ..."
        cp -rf $RSDEST/config/20-pam.ini $APACHPHP/conf.d/
        check_file $APACHPHP/conf.d/20-pam.ini
        echo "Activate website ..."
        cp -rf $RSDEST/config/rse-apache.conf $APACONFIG/rse-apache.conf
        check_file $APACONFIG/rse-apache.conf
        echo "Activate ports file ..."
        cp -rf $RSDEST/config/ports.conf /etc/apache2/ports.conf
        check_file /etc/apache2/ports.conf
        echo "Restart sevices ..."
        service apache2 restart
        echo "Upgrade GUI done ..."
    else
        echo "No RSE webinterface found, nothing to do ..."
    fi
}

#Check minimum requirements
function pre_install() {
	echo "Check packages installations  ..."
	check_package "syslog-ng"
	check_package "wget"
	check_package "git"
	check_package "elasticsearch"
	check_file "$RSBIN/rseview"
	check_file "$RSECORE/rsecore"
}

#Thank you message
function quit() {
    echo "Thank you for using Remote Syslog ..."
}

#Environment setup
clear
echo "Setting up environment ..."
echo "Check 1 ..."
if [ -e $RSPATH/rseweb ]; then
    echo "rseweb found in local directory, copy to $RSDEST started ..."
    if [ -d $RSDEST ]; then
        echo "Directory already exist ..."
    else
        mkdir $RSDEST
        echo "Directory created ..."
    fi
    cp -rf $RSPATH/* $RSDEST
elif [ -e $RSBIN/rseweb ]; then
    echo "rseweb run from $RSBIN, going for $RSDEST environment ..."
else
    echo "Did you run the installer from the right directory? ..."
fi

clear
banner
#Menu
PS3='Please enter your choice: '
options=("Upgrade RSE WEB" "Install RSE WEB" "Remove RSE WEB" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Upgrade RSE WEB")
            clear
            banner
            pre_install
            guiupgrade
            quit
            exit
    ;;
        "Install RSE WEB")
            clear
            banner
            pre_install
            rseinstall
            quit
            exit
    ;;
        "Remove RSE WEB")
            clear
            banner
            rseremove
            exit
    ;;
        "Quit")
            quit
            break
    ;;
        *) echo "Invalid option $REPLY ..." ;;
    esac
done
